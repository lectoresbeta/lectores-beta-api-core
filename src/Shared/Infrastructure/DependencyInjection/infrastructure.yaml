# Shared infrastructure components DI register
services:
  # Register symfony finder as service to avoid shared references injected given its own nature.
  # https://symfony.com/doc/current/components/finder.html#usage
  Symfony\Component\Finder\Finder:
    class: 'Symfony\Component\Finder\Finder'
    shared: false

  # Parent doctrine repository DI setup
  BetaReaders\Shared\Infrastructure\Doctrine\Repository:
    abstract: true
    arguments:
      $entityManager: '@doctrine.orm.entity_manager'

  # Command and Query bus DI setup
  BetaReaders\Shared\Infrastructure\Bus\Command\TacticianSyncCommandBus:
    arguments:
      $bus: '@tactician.commandbus.command'

  BetaReaders\Shared\Infrastructure\Bus\Query\TacticianSyncQueryBus:
    arguments:
      $bus: '@tactician.commandbus.query'

  BetaReaders\Shared\Domain\Bus\Command\CommandBus: '@BetaReaders\Shared\Infrastructure\Bus\Command\TacticianSyncCommandBus'
  BetaReaders\Shared\Domain\Bus\Query\QueryBus: '@BetaReaders\Shared\Infrastructure\Bus\Query\TacticianSyncQueryBus'

  # JSON Schema
  BetaReaders\Shared\Infrastructure\Validation\JsonSchema\JsonSchemaErrorFormatter: ~

  # JSON API
  BetaReaders\Shared\Infrastructure\Response\JsonApi\JsonApiSchemaMapping:
    arguments:
      $registrations: !tagged_iterator beta_readers.json_api_schema_registerer

  BetaReaders\Shared\Infrastructure\Response\JsonApi\JsonApiErrorResponseEncoder: ~

  BetaReaders\Shared\Infrastructure\Response\JsonApi\JsonApiResponseEncoder:
    arguments:
      $requestStack: '@request_stack'
      $mapping: '@BetaReaders\Shared\Infrastructure\Response\JsonApi\JsonApiSchemaMapping'

  # Response Factories
  BetaReaders\Shared\Infrastructure\Response\JsonResponseFactory: ~

  # AddJsonBodyToRequestListener
  BetaReaders\Packages\Symfony\Listener\AddJsonBodyToRequestListener:
    tags:
      - { name: kernel.event_listener, event: kernel.request, method: onKernelRequest }

  # Symfony Event Listeners
  BetaReaders\Packages\Symfony\Listener\ExceptionListener:
    arguments:
      $exceptionHandler: '@BetaReaders\Shared\Infrastructure\Entrypoint\Http\HttpExceptionsHandler'
      $errorResponseEncoder: '@BetaReaders\Shared\Infrastructure\Response\JsonApi\JsonApiErrorResponseEncoder'
      $responseFactory: '@BetaReaders\Shared\Infrastructure\Response\JsonResponseFactory'
    tags:
      - { name: kernel.event_listener, event: kernel.exception, method: onKernelException }

  BetaReaders\Shared\Infrastructure\Symfony\Listener\ResponseListener:
    arguments:
      $encoder: '@BetaReaders\Shared\Infrastructure\Response\JsonApi\JsonApiResponseEncoder'
      $responseFactory: '@BetaReaders\Shared\Infrastructure\Response\JsonResponseFactory'
    tags:
      - { name: kernel.event_listener, event: kernel.view, method: onKernelView, priority: 200 }

  # UuidProvider
  BetaReaders\Shared\Infrastructure\Uid\RandomUuidProvider: ~
  BetaReaders\Shared\Domain\Uid\UuidProvider: '@BetaReaders\Shared\Infrastructure\Uid\RandomUuidProvider'

  # UlidProvider
  BetaReaders\Shared\Infrastructure\Uid\RandomUlidProvider: ~
  BetaReaders\Shared\Domain\Uid\UlidProvider: '@BetaReaders\Shared\Infrastructure\Uid\RandomUlidProvider'

  # HTTP Exception Handler
  BetaReaders\Shared\Infrastructure\Entrypoint\Http\HttpExceptionsHandler:
    shared: true